--- ../cgi-src/show.c	2025-04-10 15:01:20.404545351 -0400
+++ ckstyle/show.c.gnu	2025-04-10 17:17:02.338829543 -0400
@@ -1,10 +1,10 @@
 #include <fcntl.h>
+#include <stdbool.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <sys/stat.h>
 #include <unistd.h>
-#include <stdbool.h>
 
 int
 main ()
@@ -18,7 +18,7 @@
           "sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/"
           "iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\" />\n");
   printf ("  </head>\n\n");
-  
+
   // These variables can be read from the environment using getenv().
   char *db = NULL;
   char *record = NULL;
@@ -27,7 +27,6 @@
   // This is an HTML comment. It's useful for debugging to see if your
   // environment variables got through.
 
-
   // TODO [PART]: Read the data/data.txt file and produce an HTML table
   // to match the output in the cgi-src/tests/expected/PART_show_all.txt
   // file. Note that each line in the data.txt file should correspond to
@@ -48,8 +47,6 @@
   //      </div>
   //    </body>
 
-  
-
   if ((query = getenv ("QUERY_STRING")) != NULL) // if query string is set
     {
       printf ("  <!-- Environment variables:\n");
@@ -58,22 +55,23 @@
       printf ("       hash: %s\n", hash);
       printf ("       query: %s\n", query);
       printf ("    -->\n\n");
-      
+
       char *key = strtok (query, "=");
       char *value;
       while (key != NULL)
-      {
-        value = strtok (NULL, "&"); 
-        if (strncmp ("db", key, 2) == 0)
-          db = value;
-        else if (strncmp ("record", key, 6) == 0)
-          record = value;
-        else if (strncmp ("hash", key, 4) == 0)
-          hash = value;
-        key = strtok (NULL, "=");
-      }
+        {
+          value = strtok (NULL, "&");
+          if (strncmp ("db", key, 2) == 0)
+            db = value;
+          else if (strncmp ("record", key, 6) == 0)
+            record = value;
+          else if (strncmp ("hash", key, 4) == 0)
+            hash = value;
+          key = strtok (NULL, "=");
+        }
     }
-  else // looking for environment variables independently if query string is not set
+  else // looking for environment variables independently if query string is
+       // not set
     {
       db = getenv ("db");
       record = getenv ("record");
@@ -86,58 +84,68 @@
       printf ("       query: %s\n", query);
       printf ("    -->\n\n");
     }
-    
-  FILE* file;
+
+  FILE *file;
   char buf[1024];
-  if (db != NULL) //opening the specified database file
+  if (db != NULL) // opening the specified database file
     {
       /*int n = snprintf (buffer , 0, "data/%s", record);
       realloc (record, n+1);
       snprintf (buffer , n+1, "data/%s", record);
       record = strdup (buffer);*/
 
-      char dbname[strlen(db) + 1];
+      char dbname[strlen (db) + 1];
       snprintf (dbname, strlen (db) + 6, "data/%s", db);
-      file  = fopen (dbname, "r");
+      file = fopen (dbname, "r");
     }
-  else 
-    {    
-      file  = fopen ("data/data.txt", "r");
+  else
+    {
+      file = fopen ("data/data.txt", "r");
     }
-  printf ("  <body>\n    <div class=\"container\">\n      <br />\n      <h2 class=\"mb-0\">Database Records</h2>\n      <div class=\"row\">\n");
-  
+  printf ("  <body>\n    <div class=\"container\">\n      <br />\n      <h2 "
+          "class=\"mb-0\">Database Records</h2>\n      <div class=\"row\">\n");
+
   int recordNum = 1;
-  char* r = fgets(buf, sizeof(buf), file);
-  while(r != NULL)
+  char *r = fgets (buf, sizeof (buf), file);
+  while (r != NULL)
     {
-      char* hashRead = strtok (buf, " ");
-      if (record == NULL || atoi (record) == recordNum) // If record is NULL or the record number is equal to what record we are on
+      char *hashRead = strtok (buf, " ");
+      if (record == NULL
+          || atoi (record)
+                 == recordNum) // If record is NULL or the record number is
+                               // equal to what record we are on
         {
-          char* filename = strtok (NULL, " ");
-          filename [strlen(filename)-1] = '\0';
-          printf ("        <div class=\"col py-md-2 border bg-light\">%s</div>\n", filename);
+          char *filename = strtok (NULL, " ");
+          filename[strlen (filename) - 1] = '\0';
+          printf (
+              "        <div class=\"col py-md-2 border bg-light\">%s</div>\n",
+              filename);
           if (hash != NULL)
-            { 
+            {
               if (strcmp (hash, hashRead) != 0)
                 {
                   char buff[256];
-                  snprintf (buff, 256, " <span class=\"badge badge-danger\">MISMATCH</span>");
+                  snprintf (
+                      buff, 256,
+                      " <span class=\"badge badge-danger\">MISMATCH</span>");
                   strcat (hashRead, buff);
                 }
             }
-          printf ("        <div class=\"col py-md-2 border bg-light\">%s</div>\n", hashRead);  
+          printf (
+              "        <div class=\"col py-md-2 border bg-light\">%s</div>\n",
+              hashRead);
         }
-      r = fgets(buf, sizeof(buf), file);
+      r = fgets (buf, sizeof (buf), file);
       ++recordNum;
       if (record == NULL && r != NULL)
-    	{
-    	  printf ("        <div class=\"w-100\"></div>\n");
-    	}
+        {
+          printf ("        <div class=\"w-100\"></div>\n");
+        }
     }
   fclose (file);
 
   printf ("      </div>\n    </div>\n  </body>\n");
-	
+
   // TODO [MIN]: Once you have the basic structure working, extend it to
   // read in environment variables (db, record, hash, and QUERY_STRING).
   // From a logic standpoint, if QUERY_STRING is set, use that and split it
